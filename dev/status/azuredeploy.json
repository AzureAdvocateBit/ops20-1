{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {},
    "variables": {
        "rgname": "[resourceGroup().name]",
        "azureDevopsOrgName": "[resourceGroup().name]",
        "azureDevopsProject": "[resourceGroup().name]",
        "storageAccountName": "[resourceGroup().name]",
        "logicApp": "[resourceGroup().name]",
        "devopsConnectionName": "visualstudioteamservices",
        "connections_teams_name": "teams",
        "tableConnectionName": "azuretables",
        "location": "westus",
        "repoUrl": "https://github.com/Azure-Samples/functions-teams-incident-status-page-bot.git",
        "branch": "master",
        "singleQuote": "'"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[variables('storageAccountName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
		"name": "[variables('azureDevopsOrgName')]",
		"type": "microsoft.visualstudio/account",
		"apiVersion": "2014-04-01-preview",
		"location": "centralus",
		"properties": {
			"operationType": "Create",
			"accountName": "[variables('azureDevopsOrgName')]"
		},
		"resources": [{
			"name": "[variables('rgname')]",
			"type": "project",
			"apiVersion": "2014-04-01-preview",
			"dependsOn": [
				"[concat('microsoft.visualstudio/account/', variables('azureDevopsOrgName'))]"
			],
			"location": "[variables('location')]",
			"properties": {
				"versionControlOption": "Git"
			}
		}]
	},
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('connections_teams_name')]",
            "location": "[variables('location')]",
            "properties": {
                "displayName": "[variables('rgname')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/westus/managedApis/', variables('connections_teams_name'))]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('devopsConnectionName')]",
            "location": "[variables('location')]",
            "properties": {
                "displayName": "[variables('rgname')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/westus/managedApis/', variables('devopsConnectionName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-04-01",
            "name": "[concat(variables('storageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "sku": {
                "name": "Standard_RAGRS"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('tableConnectionName')]",
            "location": "[variables('location')]",
            "properties": {
                "displayName": "oncall",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuretables')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('logicApp')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('tableConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('connections_teams_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('devopsConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "alertContext": {
                                            "properties": {
                                                "AffectedConfigurationItems": {
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "AlertType": {
                                                    "type": "string"
                                                },
                                                "IncludedSearchResults": {
                                                    "type": "string"
                                                },
                                                "LinkToSearchResults": {
                                                    "type": "string"
                                                },
                                                "Operator": {
                                                    "type": "string"
                                                },
                                                "ResultCount": {
                                                    "type": "integer"
                                                },
                                                "SearchIntervalDurationMin": {
                                                    "type": "string"
                                                },
                                                "SearchIntervalEndtimeUtc": {
                                                    "type": "string"
                                                },
                                                "SearchIntervalInMinutes": {
                                                    "type": "string"
                                                },
                                                "SearchIntervalStartTimeUtc": {
                                                    "type": "string"
                                                },
                                                "SearchQuery": {
                                                    "type": "string"
                                                },
                                                "SearchResult": {
                                                    "properties": {
                                                        "dataSources": {
                                                            "items": {
                                                                "properties": {
                                                                    "resourceId": {
                                                                        "type": "string"
                                                                    },
                                                                    "tables": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "resourceId",
                                                                    "tables"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "tables": {
                                                            "items": {
                                                                "properties": {
                                                                    "columns": {
                                                                        "items": {
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "type"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "rows": {
                                                                        "items": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name",
                                                                    "columns",
                                                                    "rows"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "SeverityDescription": {
                                                    "type": "string"
                                                },
                                                "Threshold": {
                                                    "type": "integer"
                                                },
                                                "WorkspaceId": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Create_a_channel": {
                            "runAfter": {
                                "Create_a_work_item": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "displayName": "📟 Incident -  @{body('Create_a_work_item')?['id']} (@{rand(1, 30000)})"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['teams']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/beta/groups/@{encodeURIComponent('change_me')}/channels"
                            }
                        },
                        "Create_a_work_item": {
                            "runAfter": {
                                "Response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "title": "@{triggerBody()?['alertContext']?['AlertType']} - Severity: @{triggerBody()?['alertContext']?['SeverityDescription']}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['visualstudioteamservices']['connectionId']"
                                    }
                                },
                                "method": "patch",
                                "path": "[concat('/@{encodeURIComponent(', variables('singleQuote'), variables('azureDevOpsProject'), variables('singleQuote'), ')}/_apis/wit/workitems/$@{encodeURIComponent(''Issue'')}')]",
                                "queries": {
                                    "account": "[variables('rgname')]"
                                }
                            }
                        },
                        "For_each": {
                            "foreach": "@body('Parse_JSON')",
                            "actions": {
                                "Update_a_work_item_2": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "userEnteredFields": {
                                                "Assigned To": "@items('For_each')['email']"
                                            }
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['visualstudioteamservices']['connectionId']"
                                            }
                                        },
                                        "method": "patch",
                                        "path": "/_apis/wit/workitems/@{encodeURIComponent(body('Update_a_work_item')?['id'])}",
                                        "queries": {
                                            "account": "[variables('rgname')]"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Get_entities": {
                            "runAfter": {
                                "Update_a_work_item": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/Tables/@{encodeURIComponent('oncall')}/entities",
                                "queries": {
                                    "$filter": "oncall eq true",
                                    "$select": "email"
                                }
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {
                                "Get_entities": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Get_entities')?['value']",
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "email": {
                                                "type": "string"
                                            },
                                            "odata.etag": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "odata.etag",
                                            "email"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "Post_a_message_as_the_Flow_bot_to_a_channel": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "messageBody": "[concat('<img src=\"https://thumbs.gfycat.com/DelayedVacantDassie-max-1mb.gif\" alt=\"Alert\" height=\"42\" width=\"42\"> <br />\n\n<a href=\"https://', variables('azureDevopsOrgName'), '.visualstudio.com/', variables('azureDevOpsProject'), '/_workitems/edit/@{body(''Update_a_work_item'')?[''id'']}/\">Incident @{body(''Update_a_work_item'')?[''id'']}</a><br />\n<br />\n\n@{triggerBody()?[''alertContext'']?[''AlertType'']} : @{triggerBody()?[''alertContext'']?[''SeverityDescription'']}<br />\n<br />')]",
                                    "recipient": {
                                        "channelId": "@body('Create_a_channel')?['id']"
                                    }
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['teams']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/flowbot/actions/notification/recipienttypes/channel",
                                "queries": {
                                    "groupId": "teamsgroup"
                                }
                            }
                        },
                        "Response": {
                            "runAfter": {},
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": "OPS20 - Responding To Incidents Demo 1 - ",
                                "statusCode": 200
                            }
                        },
                        "Update_a_work_item": {
                            "runAfter": {
                                "Create_a_channel": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "userEnteredFields": {
                                        "Description": "<a href=\"https://teams.microsoft.com/l/0channel/@{body('Create_a_channel')?['id']}/Active%2520Incident%2520@{body('Create_a_work_item')?['id']}?groupId=042fcb78-dd7d-4300-84c2-1515890c1697&tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47\">Communications Channel</a>"
                                    }
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['visualstudioteamservices']['connectionId']"
                                    }
                                },
                                "method": "patch",
                                "path": "/_apis/wit/workitems/@{encodeURIComponent(body('Create_a_work_item')?['id'])}",
                                "queries": {
                                    "account": "[variables('rgname')]",
                                    "project": "[variables('rgname')]"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "teams": {
								"connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/teams')]",
								"connectionName": "teams",
								"id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/teams')]"
							},
							"azuretables": {
								"connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/azuretables')]",
								"connectionName": "azuretables",
								"id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuretables')]"
							},
							"visualstudioteamservices": {
								"connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/visualstudioteamservices')]",
								"connectionName": "visualstudioteamservices",
								"id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/visualstudioteamservices')]"
							}
                        }    
                    }
                }
            }
        },
        {
			"name": "[variables('rgname')]",
			"type": "Microsoft.Web/sites",
			"properties": {
				"siteConfig": {
					"appSettings": [{
							"name": "PROJECT",
							"value": "src/functions-javascript"
						},
						{
							"name": "FUNCTIONS_WORKER_RUNTIME",
							"value": "node"
						},
						{
							"name": "AzureWebJobsStorage",
							"value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1)]"
						},
						{
							"name": "FUNCTIONS_EXTENSION_VERSION",
							"value": "~2"
						},
						{
							"name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
							"value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1)]"
						},
						{
							"name": "WEBSITE_CONTENTSHARE",
							"value": "[concat(toLower(variables('rgname')), '994d')]"
						},
						{
							"name": "WEBSITE_NODE_DEFAULT_VERSION",
							"value": "10.14.1"
						},
						{
							"name": "APPINSIGHTS_INSTRUMENTATIONKEY",
							"value": "[reference(concat('microsoft.insights/components/', variables('rgname')), '2015-05-01').InstrumentationKey]"
						},
						{
							"name": "AzureSignalRConnectionString",
							"value": "[listKeys(concat('Microsoft.SignalRService/SignalR/', variables('rgname')), '2018-10-01').primaryConnectionString]"
						}
					]
				},
				"name": "[variables('rgname')]",
				"clientAffinityEnabled": false,
				"reserved": false
			},
			"resources": [{
				"apiVersion": "2015-08-01",
				"name": "web",
				"type": "sourcecontrols",
				"dependsOn": [
					"[resourceId('Microsoft.Web/Sites', variables('rgname'))]"
				],
				"properties": {
					"RepoUrl": "[variables('repoURL')]",
					"branch": "[variables('branch')]",
					"IsManualIntegration": true
				}
			}],
			"dependsOn": [
				"[resourceId('microsoft.insights/components', variables('rgname'))]",
				"[resourceId('Microsoft.SignalRService/SignalR', variables('rgname'))]"
			],
			"apiVersion": "2016-03-01",
			"location": "Central US",
			"kind": "functionapp"
		},
        {
			"apiVersion": "2015-05-01",
			"name": "[variables('rgname')]",
			"type": "microsoft.insights/components",
			"location": "centralus",
			"properties": {
				"ApplicationId": "[variables('rgname')]",
				"Request_Source": "IbizaWebAppExtensionCreate"
			}
		},
        {
			"type": "Microsoft.SignalRService/SignalR",
			"name": "[variables('rgname')]",
			"apiVersion": "2018-10-01",
			"location": "[variables('location')]",
			"properties": {
				"hostNamePrefix": "[variables('rgname')]",
				"features": [{
					"flag": "ServiceMode",
					"value": "Serverless"
				}]
			},
			"sku": {
				"name": "Free_F1",
				"tier": "Free",
				"capacity": "1"
			}
		}
    ]
}